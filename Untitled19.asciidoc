+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 1**

Given a non-negative integerÂ `x`, returnÂ *the square root of*Â `x`Â *rounded down to the nearest integer*. The returned integer should beÂ **non-negative**Â as well.

YouÂ **must not use**Â any built-in exponent function or operator.

- For example, do not useÂ `pow(x, 0.5)`Â in c++ orÂ `x ** 0.5`Â in python.

**Example 1:**

```
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

```

**Example 2:**

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.
----


+*In[1]:*+
[source, ipython3]
----
def mySqrt(x):
    if x < 2:
        return x

    left, right = 0, x

    while left <= right:
        mid = (left + right) // 2
        mid_squared = mid * mid

        if mid_squared == x:
            return mid
        elif mid_squared > x:
            right = mid - 1
        else:
            left = mid + 1

    return right
print(mySqrt(4))  
print(mySqrt(8))
----


+*Out[1]:*+
----
2
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 2**

A peak element is an element that is strictly greater than its neighbors.

Given aÂ **0-indexed**Â integer arrayÂ `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index toÂ **any of the peaks**.

You may imagine thatÂ `nums[-1] = nums[n] = -âˆž`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs inÂ `O(log n)`Â time.

**Example 1:**

```
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
```

**Example 2:**

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
----


+*In[2]:*+
[source, ipython3]
----
def findPeakElement(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        if nums[mid] > nums[mid + 1] and nums[mid] > nums[mid - 1]:
            return mid
        elif nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid - 1

    return left
print(findPeakElement([1, 2, 3, 1]))  
print(findPeakElement([1, 2, 1, 3, 5, 6, 4]))
----


+*Out[2]:*+
----
2
5
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 3**

****

Given an arrayÂ `nums`Â containingÂ `n`Â distinct numbers in the rangeÂ `[0, n]`, returnÂ *the only number in the range that is missing from the array.*

**Example 1:**

```
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

```

**Example 2:**

```
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

```

**Example 3:**

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
----


+*In[3]:*+
[source, ipython3]
----
def missingNumber(nums):
    n = len(nums)
    expected_sum = (n * (n + 1)) // 2  # Sum of consecutive integers from 0 to n

    for num in nums:
        expected_sum -= num

    return expected_sum
print(missingNumber([3, 0, 1]))  
print(missingNumber([0, 1]))  
print(missingNumber([9, 6, 4, 2, 3, 5, 7, 0, 1]))
----


+*Out[3]:*+
----
2
2
8
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 4**

Given an array of integersÂ `nums`Â containingÂ `n + 1`Â integers where each integer is in the rangeÂ `[1, n]`Â inclusive.

There is onlyÂ **one repeated number**Â inÂ `nums`, returnÂ *thisÂ repeatedÂ number*.

You must solve the problemÂ **without**Â modifying the arrayÂ `nums`Â and uses only constant extra space.

**Example 1:**

```
Input: nums = [1,3,4,2,2]
Output: 2

```

**Example 2:**

Input: nums = [3,1,3,4,2]
Output: 3
----


+*In[4]:*+
[source, ipython3]
----
def findDuplicate(nums):
    slow = fast = nums[0]

    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    slow = nums[0]
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow
print(findDuplicate([1, 3, 4, 2, 2]))  
print(findDuplicate([3, 1, 3, 4, 2]))
----


+*Out[4]:*+
----
2
3
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 5**

Given two integer arraysÂ `nums1`Â andÂ `nums2`, returnÂ *an array of their intersection*. Each element in the result must beÂ **unique**Â and you may return the result inÂ **any order**.

**Example 1:**

```
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

```

**Example 2:**

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
----


+*In[5]:*+
[source, ipython3]
----
def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    result = list(set1.intersection(set2))
    return result
print(intersection([1, 2, 2, 1], [2, 2])) 
print(intersection([4, 9, 5], [9, 4, 9, 8, 4]))
----


+*Out[5]:*+
----
[2]
[9, 4]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 6**

Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:

- `[4,5,6,7,0,1,2]` if it was rotated `4` times.
- `[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in `O(log n) time.`

**Example 1:**

```
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

```

**Example 2:**

```
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

```

**Example 3:**

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times.
----


+*In[6]:*+
[source, ipython3]
----
def findMin(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        if nums[mid] < nums[mid - 1] and nums[mid] < nums[mid + 1]:
            return nums[mid]
        elif nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid

    return nums[left]
print(findMin([3, 4, 5, 1, 2])) 
print(findMin([4, 5, 6, 7, 0, 1, 2]))  
print(findMin([11, 13, 15, 17]))
----


+*Out[6]:*+
----
1
0
11
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 7**

Given an array of integersÂ `nums`Â sorted in non-decreasing order, find the starting and ending position of a givenÂ `target`Â value.

IfÂ `target`Â is not found in the array, returnÂ `[-1, -1]`.

You mustÂ write an algorithm withÂ `O(log n)`Â runtime complexity.

**Example 1:**

```
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

```

**Example 2:**

```
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

```

**Example 3:**

Input: nums = [], target = 0
Output: [-1,-1]
----


+*In[7]:*+
[source, ipython3]
----
def searchRange(nums, target):
    def searchLeft(nums, target):
        left, right = 0, len(nums) - 1
        position = -1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                position = mid
                right = mid - 1
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        return position

    def searchRight(nums, target):
        left, right = 0, len(nums) - 1
        position = -1

        while left <= right:
            mid = (left + right) // 2

            if nums[mid] == target:
                position = mid
                left = mid + 1
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1

        return position

    start = searchLeft(nums, target)
    end = searchRight(nums, target)

    return [start, end]
print(searchRange([5, 7, 7, 8, 8, 10], 8))  
print(searchRange([5, 7, 7, 8, 8, 10], 6))  
print(searchRange([], 0))  
----


+*Out[7]:*+
----
[3, 4]
[-1, -1]
[-1, -1]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 8**

Given two integer arraysÂ `nums1`Â andÂ `nums2`, returnÂ *an array of their intersection*. Each element in the result must appear as many times as it shows in both arrays and you may return the result inÂ **any order**.

**Example 1:**

```
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

```

**Example 2:**

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.
----


+*In[8]:*+
[source, ipython3]
----
from collections import defaultdict

def intersect(nums1, nums2):
    count = defaultdict(int)

    for num in nums1:
        count[num] += 1

    intersection = []

    for num in nums2:
        if count[num] > 0:
            intersection.append(num)
            count[num] -= 1

    return intersection
print(intersect([1, 2, 2, 1], [2, 2]))  
print(intersect([4, 9, 5], [9, 4, 9, 8, 4]))
----


+*Out[8]:*+
----
[2, 2]
[9, 4]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
